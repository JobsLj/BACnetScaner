using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO.BACnet;
using System.Linq;
using System.Text;
using System.Windows;

namespace BACnetScanBIM
{
    public class MainVM : DependencyObject
    {
        #region Instance
        static MainVM instance = new MainVM();
        public static MainVM Instance { get { return instance; } }
        private MainVM() { }
        #endregion

        BacnetClient Bacnet_client;
        #region DevicesList
        public static readonly DependencyProperty DevicesListProperty = DependencyProperty.Register("DevicesList",
            typeof(ObservableCollection<BacNode>), typeof(MainVM),
            new PropertyMetadata((sender, e) =>
            {
                var vm = sender as MainVM;
                if (vm == null) return;
            }));
        public ObservableCollection<BacNode> DevicesList
        {
            get { return GetValue(DevicesListProperty) as ObservableCollection<BacNode>; }
            set { SetValue(DevicesListProperty, value); }
        }
        #endregion
        #region SelectedDevice
        public static readonly DependencyProperty SelectedDeviceProperty = DependencyProperty.Register("SelectedDevice",
            typeof(BacNode), typeof(MainVM),
            new PropertyMetadata((sender, e) =>
            {
                var vm = sender as MainVM;
                if (vm == null) return;
            }));
        public BacNode SelectedDevice
        {
            get { return GetValue(SelectedDeviceProperty) as BacNode; }
            set { SetValue(SelectedDeviceProperty, value); }
        }
        #endregion
        #region SelectedSubNode
        public static readonly DependencyProperty SelectedSubNodeProperty = DependencyProperty.Register("SelectedSubNode",
            typeof(BacSubNode), typeof(MainVM),
            new PropertyMetadata((sender, e) =>
            {
                var vm = sender as MainVM;
                if (vm == null) return;
            }));
        public BacSubNode SelectedSubNode
        {
            get { return GetValue(SelectedSubNodeProperty) as BacSubNode; }
            set { SetValue(SelectedSubNodeProperty, value); }
        }
        #endregion

        #region Status
        public static readonly DependencyProperty StatusProperty = DependencyProperty.Register("Status",
            typeof(string), typeof(MainVM),
            new PropertyMetadata("", (sender, e) =>
            {
                var vm = sender as MainVM;
                if (vm == null) return;
            }));
        public string Status
        {
            get { return GetValue(StatusProperty) as string; }
            set { SetValue(StatusProperty, value); }
        }
        #endregion
        public void AppendStatus(string strAppend)
        {
            this.Status += Constants.Enter + strAppend;
            Console.WriteLine(strAppend);
        }

        byte InvokeId = 0x00;
        public byte GetCurrentInvokeId()
        {
            InvokeId = (byte)((InvokeId + 1) % 256);
            return InvokeId;
        }

        public void Run()
        {
            Bacnet_client = new BacnetClient(new BacnetIpUdpProtocolTransport(0xBAC0, false));
            Bacnet_client.OnIam -= new BacnetClient.IamHandler(handler_OnIam);
            Bacnet_client.OnIam += new BacnetClient.IamHandler(handler_OnIam);
            Bacnet_client.Start();
            Bacnet_client.WhoIs();
        }
        void handler_OnIam(BacnetClient sender, BacnetAddress adr, uint deviceId, uint maxAPDU,
                                    BacnetSegmentations segmentation, ushort vendorId)
        {
            this.Dispatcher.BeginInvoke(new Action(() =>
            {
                if (DevicesList == null) DevicesList = new ObservableCollection<BacNode>();
                lock (DevicesList)
                {
                    if (DevicesList.Any(x => x.DeviceId == deviceId)) return;
                    DevicesList.Add(new BacNode(adr, deviceId));
                }
            }));
        }
        public void ScanPointsBatch(BacNode device, uint count)
        {
            try
            {
                var pid = BacnetPropertyIds.PROP_OBJECT_LIST;
                var device_id = device.DeviceId;
                var bobj = new BacnetObjectId(BacnetObjectTypes.OBJECT_DEVICE, device_id);

                var adr = device?.Address;
                if (adr == null) return;

                List<BacnetPropertyReference> rList = new List<BacnetPropertyReference>();
                
                for (uint i = 1; i < count; i++)
                {
                    rList.Add(new BacnetPropertyReference((uint)pid, i));
                    if (i % 50 == 0 || i == count)//不要超了 MaxAPDU
                    {
                        IList<BacnetReadAccessResult> lstAccessRst;
                        var bRst = Bacnet_client.ReadPropertyMultipleRequest(adr, bobj, rList, out lstAccessRst, this.GetCurrentInvokeId());
                        if (bRst)
                        {
                            foreach (var aRst in lstAccessRst)
                            {
                                if (aRst.values == null) continue;
                                foreach (var bPValue in aRst.values)
                                {
                                    if (bPValue.value == null) continue;
                                    foreach (var bValue in bPValue.value)
                                    {
                                        var strBValue = "" + bValue.Value;
                                        this.AppendStatus(pid + " , " + strBValue + " , " + bValue.Tag);
                                    }
                                }
                            }
                        }
                        rList.Clear();
                    }
                }
            }
            catch (Exception exp)
            {
            }
        }


        public void ScanPoint(BacNode device, uint count)
        {
            var device_id = device.DeviceId;
            var pid = BacnetPropertyIds.PROP_OBJECT_LIST;
            for (uint index = 1; index <= count; index++)
            {
                try
                {
                    var adr = device?.Address;
                    if (adr == null) continue;
                    var list = ReadScalarValue(adr,
                        new BacnetObjectId(BacnetObjectTypes.OBJECT_DEVICE, device_id),
                        pid, this.GetCurrentInvokeId(), index);
                    if (list == null) continue;
                    foreach (var bValue in list)
                    {
                        var strBValue = "" + bValue.Value;
                        this.AppendStatus(pid + " , " + strBValue + " , " + bValue.Tag);
                        var strs = strBValue.Split(':');
                        if (strs.Length < 2) continue;
                        var strType = strs[0];
                        var strObjId = strs[1];
                        var subNode = new BacSubNode();
                        BacnetObjectTypes otype;
                        Enum.TryParse(strType, out otype);
                        subNode.ObjectId = new BacnetObjectId(otype, Convert.ToUInt32(strObjId));

                        if (device.Items == null) device.Items = new ObservableCollection<BacSubNode>();
                        device.Items.Add(subNode);
                    }
                }
                catch (Exception exp)
                {
                    this.AppendStatus("Error: " + index + " , " + exp.Message);
                }
            }
        }
        public void ScanSubProperties(BacNode device, BacSubNode subNode)
        {
            try
            {

                var adr = device?.Address;
                if (adr == null) return;

                List<BacnetPropertyReference> rList = new List<BacnetPropertyReference>();
                rList.Add(new BacnetPropertyReference((uint)BacnetPropertyIds.PROP_DESCRIPTION, uint.MaxValue));
                rList.Add(new BacnetPropertyReference((uint)BacnetPropertyIds.PROP_REQUIRED, uint.MaxValue));
                IList<BacnetReadAccessResult> lstAccessRst;
                var bRst = Bacnet_client.ReadPropertyMultipleRequest(adr, subNode.ObjectId, rList, out lstAccessRst, this.GetCurrentInvokeId());
                if (bRst)
                {
                    foreach (var aRst in lstAccessRst)
                    {
                        if (aRst.values == null) continue;
                        foreach (var bPValue in aRst.values)
                        {
                            if (bPValue.value == null) continue;
                            var pid = (BacnetPropertyIds)(bPValue.property.propertyIdentifier);
                            this.AppendStatus("---Property : " + pid);
                            foreach (var bValue in bPValue.value)
                            {
                                var strBValue = "" + bValue.Value;
                                this.AppendStatus(pid + " : " + strBValue + " , " + bValue.Tag);
                            }
                            this.AppendStatus("---Property : " + pid + " end---");
                        }
                    }
                }
            }
            catch (Exception exp)
            {
                this.AppendStatus("Error: " + exp.Message);
            }
        }
        //获取子节点个数
        public uint GetDeviceArrayIndexCount(BacNode device)
        {
            try
            {
                var adr = device?.Address;
                if (adr == null) return 0;
                var list = ReadScalarValue(adr,
                    new BacnetObjectId(BacnetObjectTypes.OBJECT_DEVICE, device.DeviceId),
                    BacnetPropertyIds.PROP_OBJECT_LIST, 0, 0);
                var rst = Convert.ToUInt32(list.FirstOrDefault().Value);
                return rst;
            }
            catch
            { }
            return 0;
        }
        IList<BacnetValue> ReadScalarValue(BacnetAddress adr, BacnetObjectId oid,
            BacnetPropertyIds pid, byte invokeId = 0, uint arrayIndex = uint.MaxValue)
        {
            try
            {
                IList<BacnetValue> NoScalarValue;
                var rst = Bacnet_client.ReadPropertyRequest(adr, oid, pid, out NoScalarValue, invokeId, arrayIndex);
                if (!rst) return null;
                return NoScalarValue;
            }
            catch { }
            return null;
        }
    }
}
