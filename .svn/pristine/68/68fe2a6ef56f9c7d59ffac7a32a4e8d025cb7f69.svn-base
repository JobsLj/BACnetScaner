using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using UDPUtil;
using BACnetCommonLib;
using System.IO;
using System.IO.BACnet;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading.Tasks;

namespace BACnetTranslator
{
    class Program
    {
        static BacnetClient Bacnet_client;
        static AsyncUdpClient Udp_Client;
        static List<BacDevice> DevicesList;
        //BACnet序号
        static int udpId = 0;
        static int GetCurrentUdpId()
        {
            udpId++;
            if (udpId >= 65536) udpId = 1;
            return udpId;
        }
        //BACnet序号
        static byte invokeId = 0;
        static byte GetCurrentInvokeId()
        {
            invokeId++;
            if (invokeId >= byte.MaxValue) invokeId = 1;
            return invokeId;
        }
        //心跳
        static int HeartBeatIndex = 0;
        static int GetHeartBeatIndex()
        {
            HeartBeatIndex++;
            if (HeartBeatIndex == int.MaxValue)
                HeartBeatIndex = 0;
            return HeartBeatIndex;
        }
        static void Main(string[] args)
        {
            Logger.Log("Begin Translate BACnet Datas");
            Init();
        }
        static void Init()
        {
            try
            {

                Settings.InitSettings();
                InitBacnet_client();
                InitUdp_Client();
                Task.Factory.StartNew(BeginScanBac);
                Task.Factory.StartNew(BeginHeartBeat);
            }
            catch (Exception exp)
            {
                Logger.Error("Init: ", exp);
            }
        }
        static void BeginHeartBeat()
        {
            var heartBeatInterval = Settings.HeartBeatInterval;
            while (true)
            {
                Thread.Sleep(heartBeatInterval);
                Logger.Log(" ^ Heart Beat ^ " + GetHeartBeatIndex());
            }
        }
        static void InitBacnet_client()
        {
            try
            {
                Bacnet_client = new BacnetClient(new BacnetIpUdpProtocolTransport(Settings.LocalBacPort, false));
                Bacnet_client.OnIam -= new BacnetClient.IamHandler(handler_OnIam);
                Bacnet_client.OnIam += new BacnetClient.IamHandler(handler_OnIam);

                Bacnet_client.Start();
                Bacnet_client.WhoIs();
            }
            catch (Exception exp)
            {
                Logger.Error("InitBacnet_client: ", exp);
            }
        }
        static void InitUdp_Client()
        {
            try
            {
                //本机节点
                var LocalUdpPort = Settings.LocalUdpPort;
                IPEndPoint localEP = new IPEndPoint(IPAddress.Any, LocalUdpPort);
                // 远程节点
                var RemoteUdpIP = IPAddress.Parse(Settings.RemoteUdpIP);
                var RemoteUdpPort = Settings.RemoteUdpPort;
                IPEndPoint remoteEP = new IPEndPoint(RemoteUdpIP, RemoteUdpPort);
                Udp_Client = new AsyncUdpClient(localEP, remoteEP, false, new NullLogger());
                //Receive
                new Thread(new ThreadStart(() =>
                {
                    while (true)
                    {
                        var str = Udp_Client.PopReceive();
                        if (!string.IsNullOrEmpty(str))
                        {
                            Logger.Log("Receive UdpCallback:" + str);
                        }
                        Thread.Sleep(100);
                    }
                })).Start();
                Udp_Client.Start();
            }
            catch (Exception exp)
            {
                Logger.Error("InitUdp_Client: ", exp);
            }
        }
        //发现设备
        static bool IsDetecteDeviceFinished = false;
        static void handler_OnIam(BacnetClient sender, BacnetAddress adr, uint deviceId, uint maxAPDU,
                                    BacnetSegmentations segmentation, ushort vendorId)
        {
            try
            {
                if (IsDetecteDeviceFinished) return;
                if (DevicesList == null) DevicesList = new List<BacDevice>();
                lock (DevicesList)
                {
                    if (DevicesList.Any(x => x.DeviceId == deviceId)) return;
                    var device = new BacDevice(adr, deviceId);
                    device.LoadPropertiesFromExcel(Path.Combine(Constants.AimExcelDir, "" + deviceId + ".xls"));
                    DevicesList.Add(device);
                    Logger.Log(@"Detect Device: " + deviceId);
                }
            }
            catch (Exception exp)
            {
                Logger.Error("handler_OnIam", exp);
            }
        }
        //扫点
        static void BeginScanBac()
        {
            try
            {
                Logger.Log("BeginScanBac");
                InitBacnet_client();
                Thread.Sleep(Settings.WaitTime);
                IsDetecteDeviceFinished = true;
                if (DevicesList == null) return;
                DevicesList = DevicesList.Where(x => x != null && x.Properties != null && x.Properties.Count > 0).
                    OrderBy(x => x.DeviceId).ToList();
                while (true)
                {
                    foreach (var device in DevicesList)
                    {
                        ScanBac(device);
                    }
                }
            }
            catch (Exception exp)
            {
                Logger.Error("BeginScanBac", exp);
            }
        }
        //扫点轮次
        static int ScanIndex = 0;
        static void ScanBac(BacDevice device)
        {
            if (device == null || device.Properties == null || device.Address == null) return;
            StringBuilder sb = new StringBuilder();
            try
            {
                Logger.Log(" @ " + device.Address + ":" + device.DeviceId + " Scan " + device.ScanIndex);

                var adr = device.Address;
                List<BacnetPropertyReference> rList = new List<BacnetPropertyReference>();
                rList.Add(new BacnetPropertyReference((uint)BacnetPropertyIds.PROP_PRESENT_VALUE, uint.MaxValue));

                var group = device.Properties.Partition(Settings.BacSplitSize);
                foreach (var subGroup in group)
                {
                    List<BacnetReadAccessSpecification> properties =
                        subGroup.Select(pro => new BacnetReadAccessSpecification(pro.ObjectId, rList)).ToList();
                    IList<BacnetReadAccessResult> lstAccessRst;
                    var bRst = Bacnet_client.ReadPropertyMultipleRequest(adr, properties, out lstAccessRst, GetCurrentInvokeId());
                    if (!bRst) continue;
                    if (lstAccessRst == null || lstAccessRst.Count == 0) continue;
                    //sb.AppendLine("=== properties.Count:" + properties.Count + " ,lstAccessRst.Count: " + lstAccessRst.Count);
                    foreach (var aRst in lstAccessRst)
                    {
                        var bPValue = aRst.values.First();
                        if (bPValue.value == null || bPValue.value.Count == 0) continue;
                        var bValue = bPValue.value.First();
                        var strBValue = "" + bValue.Value;
                        var pro = device.Properties.FirstOrDefault(x => x.ObjectId == aRst.objectIdentifier);
                        if (pro == null) continue;
                        //值没变,忽略
                        if (string.Equals(strBValue, pro.PROP_PRESENT_VALUE))
                        {
                            //sb.AppendLine($"值没变,忽略 {pro.PROP_DESCRIPTION} : { strBValue}");
                            continue;
                        }
                        var preValue = pro.PROP_PRESENT_VALUE;
                        pro.PROP_PRESENT_VALUE = strBValue;
                        //因为霍尼韦尔的误报,消防报警后面跟的故障报警暂时不报(临时)
                        if (string.Equals(strBValue, "3", StringComparison.CurrentCultureIgnoreCase) &&
                           string.Equals(preValue, "2", StringComparison.CurrentCultureIgnoreCase))
                        {
                            //sb.AppendLine("因为霍尼韦尔的误报,消防报警后面跟的故障报警暂时不报(临时)");
                            continue;
                        }

                        if (!Settings.IgnoreFirstValue || device.ScanIndex != 0)//初始值也转发
                        {
                            sb.AppendLine(SendUdpMessage(pro, GetCurrentUdpId()));
                        }
                        //sb.AppendLine("" + pro.PROP_OBJECT_NAME + " , " + strBValue + " ; ");
                    }
                }

            }
            catch (Exception exp)
            {
                Logger.Error($"ScanBac Error: {device.Address},{device.DeviceId}", exp);
            }
            finally
            {
                Logger.Log(sb.ToString());
                //扫描完一轮
                ScanIndex++;
                if (ScanIndex == int.MaxValue) ScanIndex = 0;
                device.ScanIndex = ScanIndex;
            }
        }
        //上传UDP
        static string SendUdpMessage(BacProperty pro, int udpid = 0)
        {
            try
            {
                if (Udp_Client == null || string.IsNullOrEmpty(Settings.BuildingSign) || pro == null) return string.Empty;
                StringBuilder sb = new StringBuilder();
                sb.AppendWithSplit(Settings.BuildingSign);
                sb.AppendWithSplit(Settings.Gateway);
                sb.AppendWithSplit(Settings.SendType);
                sb.AppendWithSplit(DateTime.Now.ToString(@"yyyyMMddHHmmss"));
                sb.AppendWithSplit(udpid == 0 ? GetCurrentUdpId() : udpid);
                var deviceId = pro.Device.DeviceId + "";
                if (string.IsNullOrEmpty(deviceId) || deviceId.Length < 5) return string.Empty;
                var meterSign = Settings.MeterSignPre + deviceId.Substring(0, deviceId.Length - 4) + "." + pro.PROP_OBJECT_NAME;
                sb.AppendWithSplit(meterSign);
                sb.AppendWithSplit(1);
                sb.AppendWithSplit(Settings.FuncId);
                sb.Append(pro.PROP_PRESENT_VALUE);

                var str = sb.ToString();
                for (int i = 0; i < 5; i++)
                {
                    Udp_Client.PushSend(str);
                    Thread.Sleep(100);
                }
                return "SendUdpMessage: " + str;
            }
            catch (Exception exp)
            {
                Logger.Error("SendUdpMessage", exp);
                return string.Empty;
            }
        }
    }
    public class NullLogger : ILogger
    {
        public void Debug(string message)
        {
        }

        public void Error(string message)
        {
        }

        public void Fatal(string message)
        {
        }

        public void Info(string message)
        {
        }

        public void Warn(string message)
        {
        }
    }
    static class LinqExtensions
    {
        public static IEnumerable<IEnumerable<T>> Split<T>(this IEnumerable<T> items,
                                                    int numOfParts)
        {
            int i = 0;
            return items.GroupBy(x => i++ % numOfParts);
        }
        public static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> items,
                                                       int partitionSize)
        {
            int i = 0;
            return items.GroupBy(x => i++ / partitionSize).ToArray();
        }
    }
}
