using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using UDPUtil;
using System.Configuration;
using BACnetCommonLib;
using System.IO;
using NPOI.HSSF.UserModel;
using System.IO.BACnet;

namespace BACnetTranslator
{
    class Program
    {
        static BacnetClient Bacnet_client;
        static AsyncUdpClient Client;
        static List<Bac2UdpNode> Bac2UdpNodeList;

        static int invokeId = 0;
        static int GetCurrentInvokeId()
        {
            invokeId++;
            if (invokeId >= 65536) invokeId = 1;
            return invokeId;
        }
        static void Main(string[] args)
        {
            Logger.Log("Begin Translate BACnet Datas");
            Init();
        }
        static void Init()
        {
            Settings.InitSettings();
            Bac2UdpNodeList = Bac2UdpNode.LoadBac2UdpNodeFromExcel(Constants.AimExcelDir);
            BeginScanBac();

            ////本机节点
            //var LocalIP = IPAddress.Parse(ConfigurationManager.AppSettings["LocalIP"]);
            //var LocalPort = int.Parse(ConfigurationManager.AppSettings["LocalPort"]);
            //IPEndPoint localEP = new IPEndPoint(LocalIP, LocalPort);
            //// 远程节点
            //var RemoteIP = IPAddress.Parse(ConfigurationManager.AppSettings["RemoteIP"]);
            //var RemotePort = int.Parse(ConfigurationManager.AppSettings["RemotePort"]);
            //IPEndPoint remoteEP = new IPEndPoint(RemoteIP, RemotePort);
            //Client = new AsyncUdpClient(localEP, remoteEP, false, LoggerImpl.Instance());
            //Client.Start();
        }
        static void BeginScanBac()
        {
            Logger.Log("BeginScanBac");
            Bacnet_client = new BacnetClient(new BacnetIpUdpProtocolTransport(int.Parse(ConfigurationManager.AppSettings["LocalBacPort"]), false));
            Bacnet_client.Start();

            foreach (var node in Bac2UdpNodeList)
            {
                try
                {
                    List<BacnetPropertyReference> rList = new List<BacnetPropertyReference>();
                    rList.Add(new BacnetPropertyReference((uint)BacnetPropertyIds.PROP_PRESENT_VALUE, uint.MaxValue));
                    IList<BacnetReadAccessResult> lstAccessRst;
                    var bRst = Bacnet_client.ReadPropertyMultipleRequest(
                        new BacnetAddress(BacnetAddressTypes.IP, ConfigurationManager.AppSettings["BacServerAdr"]),
                       node.BacPro.ObjectId, rList, out lstAccessRst, (byte)(GetCurrentInvokeId() % 256));
                    if (bRst)
                    {
                        foreach (var aRst in lstAccessRst)
                        {
                            if (aRst.values == null) continue;
                            foreach (var bPValue in aRst.values)
                            {
                                if (bPValue.value == null || bPValue.value.Count == 0) continue;
                                var pid = (BacnetPropertyIds)(bPValue.property.propertyIdentifier);
                                var bValue = bPValue.value.First();
                                var strBValue = "" + bValue.Value;
                                Logger.Log(pid + " , " + strBValue + " , " + bValue.Tag);
                            }
                        }
                    }
                }
                catch (Exception exp)
                {
                    Logger.Log("Error: " + exp.Message);
                }
            }
        }

        static void SendMessage(Bac2UdpNode node, int invokedId = 0)
        {
            if (Client == null || string.IsNullOrEmpty(Settings.BuildingSign) || node == null || node.IsEmpty) return;
            StringBuilder sb = new StringBuilder();
            sb.AppendWithSplit(Settings.BuildingSign);
            sb.AppendWithSplit(Settings.Gateway);
            sb.AppendWithSplit(Settings.SendType);
            sb.AppendWithSplit(DateTime.Now.ToString(@"yyyyMMddHHmmss"));
            sb.AppendWithSplit(invokedId == 0 ? GetCurrentInvokeId() : invokedId);
            sb.Append(node.ToString());
            var str = sb.ToString();
            Client.PushSend(str);
        }
    }
    public class Bac2UdpNode
    {
        public BacProperty BacPro { get; set; }
        public bool IsEmpty
        {
            get
            {
                return string.IsNullOrEmpty(this.MeterSign);
            }
        }
        public string MeterSign { get; set; }
        public string FuncId { get; set; }
        public string FuncValue { get; set; }
        public DateTime LastValueTime { get; set; }
        public override string ToString()
        {
            if (this.IsEmpty) return string.Empty;
            StringBuilder sb = new StringBuilder();
            sb.AppendWithSplit(this.MeterSign);
            sb.AppendWithSplit(1);
            sb.AppendWithSplit(this.FuncId);
            sb.AppendWithSplit(this.FuncValue);
            return sb.Remove(sb.Length - 1, 1).ToString();
        }
        public static List<Bac2UdpNode> LoadBac2UdpNodeFromExcel(string dirPath)
        {
            var lstBac2UdpNode = new List<Bac2UdpNode>();
            if (!Directory.Exists(dirPath)) return lstBac2UdpNode;
            foreach (var file in Directory.GetFiles(dirPath, "*.xls"))
            {
                var fileName = Path.GetFileNameWithoutExtension(file);
                if (fileName.Length < 5) continue;
                var meterSignPre = Settings.MeterSignPre + fileName.Substring(0, fileName.Length - 4) + ".";
                using (FileStream fp = new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    var book = new HSSFWorkbook(fp);
                    for (int sheetNum = 0; sheetNum < book.NumberOfSheets; sheetNum++)
                    {
                        var sheet = book.GetSheetAt(sheetNum);
                        if (sheet.FirstRowNum < 0 || sheet.FirstRowNum >= sheet.LastRowNum) continue;
                        for (var rowNum = sheet.FirstRowNum + 1; rowNum <= sheet.LastRowNum; rowNum++)
                        {
                            var rowContent = sheet.GetRow(rowNum);
                            if (rowContent == null) continue;
                            Bac2UdpNode node = new Bac2UdpNode();
                            node.BacPro = BacProperty.FromExcelRow(rowContent);
                            if (node.BacPro == null) continue;
                            var meterSignStuff = rowContent.GetCell(1)?.ToString();
                            if (string.IsNullOrEmpty(meterSignStuff)) continue;
                            node.MeterSign = meterSignPre + meterSignStuff;
                            node.FuncId = Settings.FuncId;
                            lstBac2UdpNode.Add(node);
                        }
                    }
                }
            }
            Logger.Log("LoadBac2UdpNodeFromExcel Finished,Count:" + lstBac2UdpNode.Count);
            return lstBac2UdpNode;
        }
    }
}
