using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using UDPUtil;
using System.Configuration;
using BACnetCommonLib;

namespace BACnetTranslator
{
    class Program
    {
        static AsyncUdpClient Client;
        static string BuildingSign;
        static int Gateway;
        static int invokeId = 0;
        static int GetCurrentInvokeId()
        {
            invokeId++;
            if (invokeId >= 65536) invokeId = 1;
            return invokeId;
        }
        static void Main(string[] args)
        {
            Console.WriteLine("Begin Translate BACnet Datas");
            Init();
        }
        static void Init()
        {
            BuildingSign = ConfigurationManager.AppSettings["BuildingSign"];
            Gateway = int.Parse(ConfigurationManager.AppSettings["BuildingSign"]);

            //本机节点
            var LocalIP = IPAddress.Parse(ConfigurationManager.AppSettings["LocalIP"]);
            var LocalPort = int.Parse(ConfigurationManager.AppSettings["LocalPort"]);
            IPEndPoint localEP = new IPEndPoint(LocalIP, LocalPort);
            // 远程节点
            var RemoteIP = IPAddress.Parse(ConfigurationManager.AppSettings["RemoteIP"]);
            var RemotePort = int.Parse(ConfigurationManager.AppSettings["RemotePort"]);
            IPEndPoint remoteEP = new IPEndPoint(RemoteIP, RemotePort);

            Client = new AsyncUdpClient(localEP, remoteEP, false, LoggerImpl.Instance());
            Client.Start();
        }
        static void SendMessage(Bac2UdpNode node)
        {
            if (Client == null || string.IsNullOrEmpty(BuildingSign) || node == null || node.IsEmpty) return;
            StringBuilder sb = new StringBuilder();
            sb.AppendWithSplit(BuildingSign);
            sb.AppendWithSplit(Gateway);
            sb.AppendWithSplit(@"report");
            sb.AppendWithSplit(DateTime.Now.ToString(@"yyyyMMddHHmmss"));
            sb.AppendWithSplit(GetCurrentInvokeId());
            sb.Append(node.ToString());
            var str = sb.ToString();
            Client.PushSend(str);
        }

    }
    public class Bac2UdpNode
    {
        public bool IsEmpty
        {
            get
            {
                return (this.FuncDatas == null || this.FuncDatas.Count == 0 || string.IsNullOrEmpty(this.MeterSign));
            }
        }
        public string MeterSign { get; set; }
        public List<FuncData> FuncDatas { get; set; }
        public override string ToString()
        {
            if (this.IsEmpty) return string.Empty;
            StringBuilder sb = new StringBuilder();
            sb.AppendWithSplit(this.MeterSign);
            sb.AppendWithSplit(this.FuncDatas.Count);
            foreach (var data in this.FuncDatas)
            {
                sb.AppendWithSplit(data.FuncId);
                sb.AppendWithSplit(data.FuncValue);
            }
            return sb.Remove(sb.Length - 1, 1).ToString();
        }
    }
    public class FuncData
    {
        public string FuncId { get; set; }
        public string FuncValue { get; set; }
    }
}
